name: CI/CD pipeline

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"
  workflow_dispatch:

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install pytest

      - name: Prepare for tests (compose up)
        run: docker compose up -d --build

      - name: Wait for services to be ready
        run: sleep 10

      - name: Run component test
        run: python test/component.py

      - name: Run integration test
        run: python test/integration.py

      - name: Clean up (compose down)
        run: docker compose down

  build_and_push_theater_service:
    name: Build and push theater service to Yandex Cloud
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          cd theater_service && docker build -f Dockerfile . --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/ms-theater-services:latest --platform=linux/amd64

      - name: Login to Yandex Cloud
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag to Yandex Cloud
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/ms-theater-services:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build_and_push_theater_service ]
    steps:
      - name: Deploy serverless container
        uses: yc-actions/yc-sls-container-deploy@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_KEYS }}
          container-name: ${{ secrets.YC_CONTAINER_NAME }}
          folder-id: ${{ secrets.YC_FOLDER_ID }}
          revision-image-url: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/ms-theater-services:latest
          revision-service-account-id: ${{ secrets.YC_SA_ID }}

  build_and_push_tickets_service:
    name: Build and push tickets service to DockerHub
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          cd tickets_service && docker build -f Dockerfile . -t ${{ secrets.DOCKER_USERNAME }}/ms-tickets-services:latest

      - name: Login to DockerHub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push tag to docker hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/ms-tickets-services:latest